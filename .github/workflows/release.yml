name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name to create or update (e.g. v1.2.0)"
        required: true
        type: string
      release_name:
        description: "Release title (defaults to YABQOLA <version>)"
        required: false
        type: string
      draft:
        description: "Create the release as a draft"
        required: false
        default: false
        type: boolean
      prerelease:
        description: "Mark the release as a prerelease"
        required: false
        default: false
        type: boolean
      build_suffix:
        description: "Optional suffix appended to the packaged zip filename"
        required: false
        default: ""
        type: string
      target_commitish:
        description: "Commit SHA or ref to tag when running manually"
        required: false
        default: main
        type: string

jobs:
  package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Load extension metadata
        id: manifest
        run: |
          set -euo pipefail
          python - <<'PY'
          import os
          from pathlib import Path

          try:
              import tomllib
          except ModuleNotFoundError:  # pragma: no cover - fallback for Python <3.11
              import tomli as tomllib  # type: ignore[no-redef]

          manifest_path = Path("blender_manifest.toml")
          if not manifest_path.exists():
              raise SystemExit(f"Missing manifest at {manifest_path}")

          with manifest_path.open("rb") as handle:
              manifest = tomllib.load(handle)

          required = ("id", "version", "name")
          missing = [field for field in required if not manifest.get(field)]
          if missing:
              missing_fields = ", ".join(missing)
              raise SystemExit(f"Manifest missing required fields: {missing_fields}")

          output_path = Path(os.environ["GITHUB_OUTPUT"])
          with output_path.open("a") as output:
              for key in required:
                  output.write(f"{key}={manifest[key]}\n")
          PY

      - name: Package extension
        env:
          BUILD_SUFFIX: ${{ github.event.inputs.build_suffix || '' }}
        run: |
          set -euo pipefail
          if [ -n "$BUILD_SUFFIX" ]; then
            python scripts/package_extension.py --force --suffix "$BUILD_SUFFIX"
          else
            python scripts/package_extension.py --force
          fi

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.manifest.outputs.id }}-${{ steps.manifest.outputs.version }}
          path: dist/*.zip

      - name: Determine release metadata
        id: meta
        shell: bash
        env:
          MANIFEST_NAME: ${{ steps.manifest.outputs.name }}
          MANIFEST_VERSION: ${{ steps.manifest.outputs.version }}
        run: |
          set -euo pipefail
          if [ -z "$MANIFEST_VERSION" ]; then
            echo "Manifest version is required to determine release metadata." >&2
            exit 1
          fi
          DEFAULT_NAME="${MANIFEST_NAME:-YABQOLA} ${MANIFEST_VERSION}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag_name }}"
            if [ -z "$TAG" ]; then
              echo "Manual runs require the tag_name input" >&2
              exit 1
            fi
            NAME="${{ github.event.inputs.release_name }}"
            if [ -z "$NAME" ]; then
              NAME="$DEFAULT_NAME"
            fi
            TARGET="${{ github.event.inputs.target_commitish }}"
            if [ -z "$TARGET" ]; then
              TARGET="main"
            fi
          else
            TAG="${GITHUB_REF#refs/tags/}"
            NAME="$DEFAULT_NAME"
            TARGET="${GITHUB_SHA}"
          fi

          EXPECTED_TAG="v${MANIFEST_VERSION}"
          if [ "$TAG" != "$EXPECTED_TAG" ]; then
            echo "::error::Tag '$TAG' does not match manifest version '$EXPECTED_TAG'." >&2
            exit 1
          fi

          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "target=$TARGET" >> "$GITHUB_OUTPUT"

      - name: Create or update GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.meta.outputs.tag }}
          name: ${{ steps.meta.outputs.name }}
          artifacts: dist/*.zip
          draft: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.draft || false }}
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || false }}
          allowUpdates: true
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}
          commit: ${{ steps.meta.outputs.target }}
